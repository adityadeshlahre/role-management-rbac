name: Publish Docker images

on:
  push:
    branches: ["master"]

jobs:
  push_to_registry:
    name: Build and Push Docker images to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker images using Docker Compose for full setup
        run: |
          docker-compose -f docker-compose.yml build

      - name: Build Docker images using Docker Compose for web & server
        run: |
          docker-compose -f build.docker-compose.yml build

      - name: Push web service image
        run: |
          docker tag role-rbac-web:latest ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-web:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-web:latest

      - name: Push server service image
        run: |
          docker tag role-rbac-server:latest ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-server:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-server:latest

      - name: Push full web-server image
        run: |
          docker tag role-rbac-full:latest ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-full:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/role-rbac-full:latest

  render_deploy:
    name: Deploy to render
    needs: [push_to_registry]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma Client
        run: npx prisma generate --schema=./prisma/schema.prisma
        working-directory: packages/db
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run database migrations
        run: npx prisma migrate deploy --schema=./prisma/schema.prisma
        working-directory: packages/db
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Seed the production database
        run: npx tsx packages/db/src/seed.ts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Sleep for 5 seconds before deploying Server Service
        run: sleep 5

      - name: Deploy Server Service to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID_SERVER }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Sleep for 5 seconds before deploying Web Service
        run: sleep 5

      - name: Deploy Web Service to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID_WEB }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
